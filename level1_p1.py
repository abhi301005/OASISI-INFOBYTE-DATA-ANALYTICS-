# -*- coding: utf-8 -*-
"""LEVEL1 P1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10rMMY_LMt4nWsCFl9xDY4BOdlfsu8LzE

# IMPORTING THE LIBRARYS
"""

import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings("ignore")
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import pointbiserialr

"""// The first step is to import the librarys for data analysis.
numpy is for numerical operations,pandas is for data manipulation and analysis,warning is a built in function it manages warnings while execution,seaborn is for data visualization.

## MOUNT THE GOOGLE DRIVE
"""

from google.colab import drive
import os

drive.mount('/content/drive')

"""## IMPORTING THE DATASET"""

df = pd.read_csv('/content/drive/My Drive/retail_sales_dataset.csv')

"""// 'df' is a variable,pd is to read the data from the spacified file,read_csv() it is a function from pandas,/content/drive/My Drive/retail_sales_dataset.csv.  it is the path to access the file."""

df.head()

"""// I used .head() to show the first 5 rows of data present in the file."""

df.tail()

"""// I used .tail() to show the last 5 rows of data present in the file it works same like .head().

## DISCRIBING THE DATASET
"""

df.info()

"""// .info() is used to provide column details and the type of data is used and also the memory storage."""

df.shape

"""// .shape is used for knowing how many rows and columns are present."""

df.isnull().sum()

"""// .isnull() is check wether there are any null values present in the file if we use .sum() we can see the how many values are null.

# VISUALIZEING THE DATASET
"""

df.describe()

"""// .describe is used to COUNT the data values inculuding the **mean, median, mode, standard deviation**."""

for col in df.columns:
  print(f"'{col}': {df[col].nunique()}")

"""//I used for loop is to check wether are there any unique values present."""

sns.pairplot(df)

"""// seaborn.pairplot() function to create a pair plot for every columns

# COUNTING THE PRODUCT CATEGORY
"""

df['Product Category'].value_counts()

"""// .valuecount() is used for counting how many values are present.

# REPRESTING THE BAR GRAPH
"""

sns.countplot(x=df['Product Category'])
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

"""// .show is used to show the graph.

# GROUPING THE DATA.
"""

df.groupby("Product Category")[["Quantity", "Total Amount"]].sum()

"""// .groupby is used for spliting the columns and can be used for combining for our purpose.

# COMPARING USING BAR GRAPH
"""

import matplotlib.pyplot as plt
import seaborn as sns
category_summary = df.groupby("Product Category")[["Quantity", "Total Amount"]].sum()
fig, ax = plt.subplots(1, 2, figsize=(14, 5))
sns.barplot(x=category_summary.index, y=category_summary["Quantity"], ax=ax[0], palette='Blues')
ax[0].set_title('Total Quantity by Product Category')
ax[0].set_xlabel('Product Category')
ax[0].set_ylabel('Total Quantity')
ax[0].tick_params(axis='x', rotation=45)
sns.barplot(x=category_summary.index, y=category_summary["Total Amount"], ax=ax[1], palette='Greens')
ax[1].set_title('Total Sales Amount by Product Category')
ax[1].set_xlabel('Product Category')
ax[1].set_ylabel('Total Sales Amount')
ax[1].tick_params(axis='x', rotation=45)
plt.tight_layout()
plt.show()

"""# CREATING THE PIE CHART"""

category_counts = df["Product Category"].value_counts()
explode_list = [0.1 if i == category_counts.idxmax() else 0 for i in category_counts.index]
plt.figure(figsize=(10, 6))
plt.pie(
    category_counts,
    labels=category_counts.index,
    autopct='%1.1f%%',
    startangle=140,
    colors=sns.color_palette('pastel')[0:len(category_counts)],
    explode=explode_list,)
plt.title('Product Category Distribution')
plt.axis('equal')
plt.show()

"""# NUMBER OF ENTRYS ON THE PARTICULAR MONTH"""

df['Date'] = pd.to_datetime(df['Date'])
df ['Month'] = df ['Date'].dt.month_name()
df['Month']

monthly_sales = df.groupby('Month')['Total Amount'].sum().sort_values(ascending=False)
display(monthly_sales)

"""## TOTAL SALES AMOUNT ON EACH MONTH"""

plt.figure(figsize=(12,6))

sns.lineplot(x="Month", y="Total Amount", data= df)

plt.title("Sales Trend Overtime", fontsize=16)

plt.xlabel("Month", fontsize=14)

plt.ylabel("Total Sales Amount per month", fontsize=14)

plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Calculate the transaction count per month
transaction_count = df.groupby('Month')['Transaction ID'].count()

# Create line plot for transaction count over months
plt.figure(figsize=(12,6))
sns.lineplot(x=transaction_count.index, y=transaction_count.values)

plt.title("Transaction Frequency Over Months", fontsize=16)
plt.xlabel("Month", fontsize=14)
plt.ylabel("Transaction Count", fontsize=14)

plt.show()

"""## TRANSACTION FREQUENCE OVER EACH MONTH"""

plt.figure(figsize=(12,6))
sns.barplot(x=transaction_count.index, y=transaction_count.values)
plt.title("Transaction Frequency over Months", fontsize=16)
plt.xlabel("Month", fontsize=14)
plt.ylabel ("Transaction Count", fontsize=14)
plt.show()

"""## SALES HEATMAP"""

heatmap = df.pivot_table(index='Month', columns='Product Category', values='Total Amount')
plt.figure(figsize=(12, 6))
sns.heatmap(heatmap, annot=True, fmt='.0f')
plt.title("Sales Heatmap", fontsize=16)
plt.xlabel("Product Category", fontsize=14)
plt.ylabel("Month", fontsize=14)
plt.show()

"""TO"""

df['Age'].count()
gender_counts = df['Gender'].value_counts()
display(gender_counts)

"""## PIE CHART OF GENDER"""

gender_counts = df['Gender'].value_counts()
plt.figure(figsize=(6, 6))
plt.pie(
    gender_counts,
    labels=gender_counts.index,
    autopct='%1.1f%%',
    startangle=90,
    colors=sns.color_palette('pastel')[0:len(gender_counts)],
    radius=0.5
)
plt.title('Gender Distribution', fontsize=16)
plt.axis('equal')
plt.show()

"""SAPARTING THE AGE"""

age_a=[0,18,25,35,50, 100]
age_groups=['0-18','19-25','26-35','36-50','50+']
df['Age Group']= pd.cut(df['Age'],bins=age_a,labels=age_groups, right=False)
df.head()

"""## DISTRIBUTION OF AGE AND GENDER"""

plt.figure(figsize=(12,6))
sns.swarmplot(x='Product Category', y='Age', hue='Gender', data=df, palette='Set2')
plt.title('Distribution of Age and Gender across Product Category', fontsize=16)
plt.show()

plt.figure(figsize=(12,6))
plt.title("Age of the person")
plt.xlabel("Age")
sns.countplot(x='Age', data=df)

df.info()

plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Correlation Heatmap of Numerical Columns', fontsize=16)
plt.show()

"""Unveiling Insights from Product Price Distribution within Each Category

Exploring data insights to answer the question "What insights can be gleaned from the distribution of product prices within each category?" reveals intriguing patterns that shed light on consumer behavior and preferences. Here's a breakdown of the findings:

Top-Selling Items at Same Price levels:

Within the Clothing category, the highest-selling items are priced at 25, 30, 50, and 300. Sales figures indicate 184 (35.2%), 171 (38.4%), 189 (35.4%), and 193 (37.3%) units sold, respectively.
Interestingly, both Beauty and Electronics categories perform exceptionally well at a price point of 500, with an equal share of 34.1%, totaling 169 units each.
Sales Volume Across Price levels, Compared within Each Product Category:

In the Beauty category, products sell best at prices of 50 -> 500 -> 25 -> 300 -> 30.
For Clothing items, the highest sales are observed at prices of 300 -> 50 -> 25 -> 30 -> 500.
Similarly, Electronics products perform well at prices of 300 -> 25 -> 50 -> 500 -> 30.
These insights provide valuable information for businesses to understand consumer preferences and tailor their product offerings and marketing strategies accordingly. By aligning product pricing with customer preferences, businesses can optimize sales and enhance customer satisfaction, ultimately driving growth and success in the market.
"""